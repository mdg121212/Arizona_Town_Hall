/**
 * Wild Apricot Admin API
 *  This is Wild Apricot's API for administrators. You can use it if you already have a Wild Apricot account (typically with a website on  *.wildapricot.org). Otherwise, please use https://register.wildapricot.com to create a new account.  If you have any questions about this API, please contact our support team at support@wildapricot.com.
 *
 * OpenAPI spec version: 7.14.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import com.squareup.moshi.Json

/**
 *
 * @param Id Unique event identifier
 * @param Url
 * @param Name Event title
 * @param EventType Indicates if event is simple (RSVP) or regular.
 * @param StartDate Date and time when the event is scheduled to start.
 * @param StartTimeSpecified Indicates if event start time is specified. False means that StartDate contains only date component.
 * @param EndDate Date and time when the event is scheduled to end. Could be empty.
 * @param EndTimeSpecified Indicates if event end time is specified. False means that EndDate contains only date component.
 * @param Location Location where the event will take place.
 * @param RegistrationEnabled Indicates whether registration to this event is enabled
 * @param HasEnabledRegistrationTypes Indicates that at least one registration type is enabled for this event.
 * @param AccessLevel
 * @param Tags A collection of tags associated with the event.
 * @param Details
 * @param Sessions Collection of event sessions. Exist in multisessions events only.
 * @param RegistrationsLimit Maximum number of registrations for this event.
 * @param InviteeStat
 * @param PendingRegistrationsCount Number of participants already registered for this event but not confirmed yet.
 * @param ConfirmedRegistrationsCount Number of participants already registered for this event and already confirmed.
 * @param CheckedInAttendeesNumber Number of attendees already checked in on this event.
 */
data class Event(
    /* Unique event identifier */
    val Id: kotlin.Int,
    val Url: ResourceUrl,
    /* Event title */
    val Name: kotlin.String,
    /* Indicates if event is simple (RSVP) or regular. */
    val eventType: Event.EventType,
    /* Date and time when the event is scheduled to start. */
    val StartDate: kotlin.String,
    /* Indicates if event start time is specified. False means that StartDate contains only date component. */
    val StartTimeSpecified: kotlin.Boolean? = null,
    /* Date and time when the event is scheduled to end. Could be empty. */
    val EndDate: kotlin.String? = null,
    /* Indicates if event end time is specified. False means that EndDate contains only date component. */
    val EndTimeSpecified: kotlin.Boolean? = null,
    /* Location where the event will take place. */
    val Location: kotlin.String? = null,
    /* Indicates whether registration to this event is enabled */
    val RegistrationEnabled: kotlin.Boolean? = null,
    /* Indicates that at least one registration type is enabled for this event. */
    val HasEnabledRegistrationTypes: kotlin.Boolean? = null,
    val AccessLevel: EventAccessLevel? = null,
    /* A collection of tags associated with the event. */
    val Tags: kotlin.Array<kotlin.String>? = null,
    val Details: EventDetails? = null,
    /* Collection of event sessions. Exist in multisessions events only. */
    val Sessions: kotlin.Array<EventSesssion>? = null,
    /* Maximum number of registrations for this event. */
    val RegistrationsLimit: kotlin.Int? = null,
    val InviteeStat: EventInviteeStatistics? = null,
    /* Number of participants already registered for this event but not confirmed yet. */
    val PendingRegistrationsCount: kotlin.Int? = null,
    /* Number of participants already registered for this event and already confirmed. */
    val ConfirmedRegistrationsCount: kotlin.Int? = null,
    /* Number of attendees already checked in on this event. */
    val CheckedInAttendeesNumber: kotlin.Int? = null
) {

    /**
     * Indicates if event is simple (RSVP) or regular.
     * Values: reqular,rSVP
     */
    enum class EventType(val value: kotlin.String) {

        @Json(name = "Reqular")
        reqular("Reqular"),

        @Json(name = "RSVP")
        rSVP("RSVP");

    }

}

