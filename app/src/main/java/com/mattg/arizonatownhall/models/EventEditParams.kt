/**
 * Wild Apricot Admin API
 *  This is Wild Apricot's API for administrators. You can use it if you already have a Wild Apricot account (typically with a website on  *.wildapricot.org). Otherwise, please use https://register.wildapricot.com to create a new account.  If you have any questions about this API, please contact our support team at support@wildapricot.com.
 *
 * OpenAPI spec version: 7.14.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import com.squareup.moshi.Json

/**
 *
 * @param Id Unique identifier of event. This field should be provided only when updating existing event.
 * @param Name Event title
 * @param EventType Indicates if event is simple (RSVP) or regular.
 * @param StartDate Date and time when the event is scheduled to start. If no time offset is specified, counts as UTC and will be converted into event timezone.
 * @param StartTimeSpecified Indicates if event start time is specified. False means that StartDate contains only date component.
 * @param EndDate Date and time when the event is scheduled to end. Could be empty. If no time offset is specified, counts as UTC and will be converted into event timezone.
 * @param EndTimeSpecified Indicates if event end time is specified. False means that EndDate contains only date component.
 * @param Location Location where the event will take place.
 * @param RegistrationEnabled Indicates that registration to this event is enabled
 * @param Tags A collection of tags associated with the event.
 * @param Details
 * @param Sessions Collection of event sessions. Exist in multisessions events only.
 * @param RegistrationsLimit Maximum number of registrations for this event.
 */
data class EventEditParams(
    /* Event title */
    val Name: kotlin.String,
    /* Indicates if event is simple (RSVP) or regular. */
    val eventType: EventEditParams.EventType,
    /* Date and time when the event is scheduled to start. If no time offset is specified, counts as UTC and will be converted into event timezone. */
    val StartDate: kotlin.String,
    /* Unique identifier of event. This field should be provided only when updating existing event. */
    val Id: kotlin.Int? = null,
    /* Indicates if event start time is specified. False means that StartDate contains only date component. */
    val StartTimeSpecified: kotlin.Boolean? = null,
    /* Date and time when the event is scheduled to end. Could be empty. If no time offset is specified, counts as UTC and will be converted into event timezone. */
    val EndDate: kotlin.String? = null,
    /* Indicates if event end time is specified. False means that EndDate contains only date component. */
    val EndTimeSpecified: kotlin.Boolean? = null,
    /* Location where the event will take place. */
    val Location: kotlin.String? = null,
    /* Indicates that registration to this event is enabled */
    val RegistrationEnabled: kotlin.Boolean? = null,
    /* A collection of tags associated with the event. */
    val Tags: kotlin.Array<kotlin.String>? = null,
    val Details: EventDetailsEditParams? = null,
    /* Collection of event sessions. Exist in multisessions events only. */
    val Sessions: kotlin.Array<EventSesssion>? = null,
    /* Maximum number of registrations for this event. */
    val RegistrationsLimit: kotlin.Int? = null
) {

    /**
     * Indicates if event is simple (RSVP) or regular.
     * Values: reqular,rSVP
     */
    enum class EventType(val value: kotlin.String) {

        @Json(name = "Reqular")
        reqular("Reqular"),

        @Json(name = "RSVP")
        rSVP("RSVP");

    }

}

