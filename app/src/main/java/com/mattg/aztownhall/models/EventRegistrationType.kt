/**
 * Wild Apricot Admin API
 *  This is Wild Apricot's API for administrators. You can use it if you already have a Wild Apricot account (typically with a website on  *.wildapricot.org). Otherwise, please use https://register.wildapricot.com to create a new account.  If you have any questions about this API, please contact our support team at support@wildapricot.com.
 *
 * OpenAPI spec version: 7.14.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

/**
 *
 * @param Id Unique event registration type identifier.
 * @param Url
 * @param IsEnabled Indicates whether this registration type is enabled
 * @param EventId Identifier of event related to the registration type.
 * @param Name Registraton type title.
 * @param Description Plain text description for the event registration type.
 * @param BasePrice Base price registrant pays for this registration type.
 * @param GuestPrice Price for each additional guest.
 * @param UseTaxScopeSettings Indicates whether account tax scope settings should be used to calculate final price.
 * @param Availability
 * @param RegistrationCode Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired.
 * @param AvailableForMembershipLevels Which membership levels can apply for event. This property has value only if Availability is MembersOnly.
 * @param AvailableFrom This registration type is available starting from this date. Can be null.
 * @param AvailableThrough This registration type is available until this date. Can be null.
 * @param MaximumRegistrantsCount Maximum number of registrants for this registration type.
 * @param CurrentRegistrantsCount Current number of registrants for this registration type.
 * @param GuestRegistrationPolicy
 * @param UnavailabilityPolicy
 * @param CancellationBehaviour
 * @param CancellationDaysBeforeEvent In case if CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field indicates the minimum number of days before the event that cancellations are allowed.
 * @param IsWaitlistEnabled Indicated if registrant should be added to waitlist if registrations have reached their limit.
 */
data class EventRegistrationType(
    /* Unique event registration type identifier. */
    val Id: kotlin.Int? = null,
    val Url: ResourceUrl? = null,
    /* Indicates whether this registration type is enabled */
    val IsEnabled: kotlin.Boolean? = null,
    /* Identifier of event related to the registration type. */
    val EventId: kotlin.Int? = null,
    /* Registraton type title. */
    val Name: kotlin.String? = null,
    /* Plain text description for the event registration type. */
    val Description: kotlin.String? = null,
    /* Base price registrant pays for this registration type. */
    val BasePrice: java.math.BigDecimal? = null,
    /* Price for each additional guest. */
    val GuestPrice: java.math.BigDecimal? = null,
    /* Indicates whether account tax scope settings should be used to calculate final price. */
    val UseTaxScopeSettings: kotlin.Boolean? = null,
    val Availability: EventRegistrationTypeAvailability? = null,
    /* Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired. */
    val RegistrationCode: kotlin.String? = null,
    /* Which membership levels can apply for event. This property has value only if Availability is MembersOnly. */
    val AvailableForMembershipLevels: kotlin.Array<LinkedResource>? = null,
    /* This registration type is available starting from this date. Can be null. */
    val AvailableFrom: kotlin.String? = null,
    /* This registration type is available until this date. Can be null. */
    val AvailableThrough: kotlin.String? = null,
    /* Maximum number of registrants for this registration type. */
    val MaximumRegistrantsCount: kotlin.Int? = null,
    /* Current number of registrants for this registration type. */
    val CurrentRegistrantsCount: kotlin.Int? = null,
    val GuestRegistrationPolicy: EventGuestRegistrationPolicy? = null,
    val UnavailabilityPolicy: EventRegistrationUnavailabilityPolicy? = null,
    val CancellationBehaviour: EventRegistrationCancellationBehavior? = null,
    /* In case if CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field indicates the minimum number of days before the event that cancellations are allowed. */
    val CancellationDaysBeforeEvent: kotlin.Int? = null,
    /* Indicated if registrant should be added to waitlist if registrations have reached their limit. */
    val IsWaitlistEnabled: kotlin.Boolean? = null
) {

}

