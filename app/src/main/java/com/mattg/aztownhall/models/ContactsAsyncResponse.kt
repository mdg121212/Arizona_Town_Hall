/**
 * Wild Apricot Admin API
 *  This is Wild Apricot's API for administrators. You can use it if you already have a Wild Apricot account (typically with a website on  *.wildapricot.org). Otherwise, please use https://register.wildapricot.com to create a new account.  If you have any questions about this API, please contact our support team at support@wildapricot.com.
 *
 * OpenAPI spec version: 7.14.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import com.squareup.moshi.Json

/**
 *
 * @param ResultId Unique result identifier.
 * @param ResultUrl URL to check async result availability. We expect that client application will check this URL with some small delay (every 5 sec) until API returns a list of contacts or ProcessingState==Failed.
 * @param Requested Date and time when the request was queued for processing.
 * @param Processed Date and time when the request was processed.
 * @param ProcessingState Asynchronous request state. It starts from Waiting, then server process it. Request may end in one of final states: Complete or Failed.
 * @param InitialQuery
 * @param ErrorDetails In case of error, provides description of error occured.
 */
data class ContactsAsyncResponse(
    /* Unique result identifier. */
    val ResultId: kotlin.String? = null,
    /* URL to check async result availability. We expect that client application will check this URL with some small delay (every 5 sec) until API returns a list of contacts or ProcessingState==Failed. */
    val ResultUrl: kotlin.String? = null,
    /* Date and time when the request was queued for processing. */
    val Requested: kotlin.String? = null,
    /* Date and time when the request was processed. */
    val Processed: kotlin.String? = null,
    /* Asynchronous request state. It starts from Waiting, then server process it. Request may end in one of final states: Complete or Failed. */
    val processingState: ContactsAsyncResponse.ProcessingState? = null,
    val InitialQuery: ContactsAsyncResponseInitialQuery? = null,
    /* In case of error, provides description of error occured. */
    val ErrorDetails: kotlin.String? = null
) {

    /**
     * Asynchronous request state. It starts from Waiting, then server process it. Request may end in one of final states: Complete or Failed.
     * Values: waiting,processing,complete,failed
     */
    enum class ProcessingState(val value: kotlin.String) {

        @Json(name = "Waiting")
        waiting("Waiting"),

        @Json(name = "Processing")
        processing("Processing"),

        @Json(name = "Complete")
        complete("Complete"),

        @Json(name = "Failed")
        failed("Failed");

    }

}

